version: '3.7'
services:
  dev_db:
    image: postgres:12
    volumes:
      - dev_dbdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '${DEV_DB_PORT}:5432'
    networks:
      - internal

  dev_backend:
    build: .
    entrypoint: ./wait-for db:5432 -- ./entrypoint.sh
    command: bash -c 'cd /app/backend/ && poetry run gunicorn --timeout 1800 -b 0.0.0.0:8000 Daylesford.wsgi:application'
    environment:
      - DB=postgresql://postgres:postgres@dev_db:5432/postgres
      - SECRET_KEY
      - SITE_HOST
      - API_HOST
      - MEDIA_ROOT=/app/media
    depends_on:
      - dev_db
    volumes:
      - dev_static:/app/static
      - dev_media:/app/media
    labels:
      - traefik.http.routers.dev-web-backend.rule=(Host(`${SITE_HOST}`))
      - traefik.http.routers.dev-web-backend.entryPoints=dev
      - traefik.http.services.dev-backend.loadbalancer.server.port=8000
      - traefik.http.middlewares.dev-backendheader.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.dev-backendheader.headers.STSSeconds=315360000
      - traefik.docker.network=web
    networks:
      - internal

  dev_nginx:
    build: ./nginx
    command: /bin/sh -c "envsubst '$$SITE_HOST $$SITE_PORT' < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    depends_on:
      - dev_backend
    environment:
      - SITE_HOST
    volumes:
      - dev_static:/var/www/static:ro
      - dev_media:/var/www/media:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.dev-nginx.rule=Host(`${SITE_HOST}`) && PathPrefix(`/static`, `/media`)
      - traefik.http.routers.dev-nginx.entryPoints=dev
      - traefik.http.services.dev-nginx.loadbalancer.server.port=80
    networks:
      - internal
      - web

networks:
  web:
    external: true
  internal:
    external: false


volumes:
  dev_static:
  dev_media:
  dev_dbdata:
